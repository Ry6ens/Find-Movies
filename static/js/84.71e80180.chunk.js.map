{"version":3,"file":"static/js/84.71e80180.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/Posts/Post.module.scss?5b4f","components/Posts/Posts.jsx","webpack://goit-react-hw-05-movies/./src/components/SearchBox/SearchBox.module.scss?7ae8","components/SearchBox/SearchBox.jsx","pages/Movie/Movies.jsx","service/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"postsList\":\"Post_postsList__JiwXg\",\"postsItem\":\"Post_postsItem__MAEy8\",\"postTitle\":\"Post_postTitle__NG6zJ\",\"postDate\":\"Post_postDate__GcNgp\"};","import styles from \"./Post.module.scss\";\nimport plugImg from \"../../img/plugIMG.jpg\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport Moment from \"react-moment\";\nimport { nanoid } from \"nanoid\";\nimport PropTypes from \"prop-types\";\n\nexport default function Posts({ movies }) {\n  const location = useLocation();\n\n  return (\n    <ul className={styles.postsList}>\n      {movies &&\n        movies.map((movie) => (\n          <li key={nanoid()}>\n            <Link\n              className={styles.postsItem}\n              to={`/movies/${movie.id}`}\n              state={{ from: location }}\n            >\n              {movie.poster_path !== null ? (\n                <img\n                  src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n                  alt=\"\"\n                  width=\"172\"\n                  height=\"258\"\n                />\n              ) : (\n                <img src={plugImg} alt=\"\" width=\"172\" height=\"258\"></img>\n              )}\n\n              <h2 className={styles.postTitle}>{movie.title}</h2>\n              <Moment className={styles.postDate} format=\"YYYY\">\n                {movie.release_date}\n              </Moment>\n            </Link>\n          </li>\n        ))}\n    </ul>\n  );\n}\n\nPosts.propType = {\n  movie: PropTypes.arrayOf(\n    PropTypes.shape({\n      poster_path: PropTypes.string,\n      title: PropTypes.string,\n      release_date: PropTypes.string,\n    })\n  ),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"SearchBox_searchbar__ve2wr\",\"SearchForm\":\"SearchBox_SearchForm__kP+5u\",\"SearchFormButton\":\"SearchBox_SearchFormButton__c1zG3\",\"SearchFormButtonLabel\":\"SearchBox_SearchFormButtonLabel__ISDVe\",\"SearchFormInput\":\"SearchBox_SearchFormInput__GlJ4B\"};","import styles from \"./SearchBox.module.scss\";\nimport PropTypes from \"prop-types\";\n\nexport default function SearchBox({ getSearch }) {\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const query = e.currentTarget.elements.search.value;\n    getSearch(query);\n\n    e.currentTarget.reset();\n  };\n\n  return (\n    <div className={styles.searchbar}>\n      <form className={styles.SearchForm} onSubmit={handleSubmit}>\n        <button type=\"submit\" className={styles.SearchFormButton}>\n          <span className={styles.SearchFormButtonLabel}>Search</span>\n        </button>\n\n        <input\n          className={styles.SearchFormInput}\n          type=\"text\"\n          autoComplete=\"off\"\n          name=\"search\"\n          autoFocus\n          placeholder=\"Search movies\"\n        />\n      </form>\n    </div>\n  );\n}\n\nSearchBox.propType = {\n  getSearch: PropTypes.func,\n};\n","// import styles from \"./Movies.module.scss\";\n\nimport SearchBox from \"../../components/SearchBox/SearchBox\";\nimport Posts from \"../../components/Posts/Posts\";\n// import NotFoundPage from \"../NotFoundPage/NotFoundPage\";\nimport { fetchSearchMovie, fetchPopularMovie } from \"../../service/api\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport Notiflix from \"notiflix\";\n\nexport default function Movies() {\n  const [items, setItems] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [page, setPage] = useState(1);\n\n  const q = searchParams.get(\"q\");\n\n  const targetScroll = useRef(null);\n\n  const observer = new IntersectionObserver(\n    (entries, observer) => {\n      if (entries[0].isIntersecting) {\n        setPage((prevPage) => prevPage + 1);\n      }\n    },\n    {\n      root: null,\n      rootMargin: \"400px\",\n      threshold: 1,\n    }\n  );\n\n  useEffect(() => {\n    const fetchSearchMovies = async () => {\n      try {\n        const data = await fetchSearchMovie(q);\n        console.log(data);\n        if (data.total_results === 0) {\n          Notiflix.Notify.warning(\"No hits. Try again\");\n        }\n        setItems([...data.results]);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    if (q) {\n      observer.observe(targetScroll.current);\n      fetchSearchMovies();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [q]);\n\n  useEffect(() => {\n    if (items.length > 0) {\n      loadMoreData();\n    }\n\n    async function loadMoreData() {\n      try {\n        const data = await fetchPopularMovie(page);\n\n        if (data.results.length === 0) {\n          console.log(\"unobserve\");\n          observer.unobserve(targetScroll);\n          return;\n        }\n\n        setItems([...items, ...data.results]);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [page]);\n\n  const onSearch = (q) => {\n    const params = Object.fromEntries([...searchParams]);\n    setSearchParams({ ...params, q });\n    setItems([]);\n  };\n\n  return (\n    <main>\n      <SearchBox getSearch={onSearch} />\n      <Posts movies={items} />\n      <div className=\"target-element\" ref={targetScroll}></div>\n    </main>\n  );\n}\n","import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://api.themoviedb.org/3\",\n  params: { api_key: \"9bc0101e379e5e6c089a5fdeff30de32\" },\n});\n\nexport const fetchPopularMovie = async (page = 1) => {\n  const { data } = await instance.get(\"/trending/movie/day\", {\n    params: { page },\n  });\n  return data;\n};\n\nexport const fetchSearchMovie = async (query) => {\n  const { data } = await instance.get(\"/search/movie\", { params: { query } });\n  return data;\n};\n\nexport const fetchGetMovieDetails = async (movie_id) => {\n  const { data } = await instance.get(`/movie/${movie_id}`);\n  return data;\n};\n\nexport const fetchGetMovieCredits = async (movie_id) => {\n  const { data } = await instance.get(`/movie/${movie_id}/credits`);\n  return data;\n};\n\nexport const fetchGetMovieReviews = async (movie_id) => {\n  const { data } = await instance.get(`/movie/${movie_id}/reviews`);\n  return data;\n};\n\nexport const fetchGetMovieVideo = async (movie_id) => {\n  const { data } = await instance.get(`/movie/${movie_id}/videos`);\n  return data;\n};\n"],"names":["Posts","movies","location","useLocation","className","styles","map","movie","to","id","state","from","poster_path","src","alt","width","height","plugImg","title","format","release_date","nanoid","propType","PropTypes","SearchBox","getSearch","onSubmit","e","preventDefault","query","currentTarget","elements","search","value","reset","type","autoComplete","name","autoFocus","placeholder","Movies","useState","items","setItems","useSearchParams","searchParams","setSearchParams","page","setPage","q","get","targetScroll","useRef","observer","IntersectionObserver","entries","isIntersecting","prevPage","root","rootMargin","threshold","useEffect","fetchSearchMovies","fetchSearchMovie","data","console","log","total_results","Notiflix","results","observe","current","fetchPopularMovie","length","unobserve","error","loadMoreData","params","Object","fromEntries","ref","instance","axios","baseURL","api_key","fetchGetMovieDetails","movie_id","fetchGetMovieCredits","fetchGetMovieReviews","fetchGetMovieVideo"],"sourceRoot":""}